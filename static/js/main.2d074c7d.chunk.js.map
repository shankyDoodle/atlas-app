{"version":3,"sources":["actions/index.js","components/ListNode.js","components/Panel.js","components/App.js","serviceWorker.js","reducers/index.js","reducers/initial-state.js","index.js"],"names":["TOGGLE_SORT_ORDER","TOGGLE_PANEL_COLLAPSE","LOAD_MORE","toggleSortOrder","sortColumn","sCurrentSortOrder","type","sortOrder","togglePanelCollapse","bVal","isPanelCollapsed","handleLoadMore","React","require","Tooltip","ListNode","createElement","className","title","this","props","name","enterDelay","cases","Component","ConnectedListNode","connect","state","Panel","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleLoadMoreItems","handleCollapseIconClicked","oEvent","stopPropagation","oProps","communities","paginatedData","city","totalCount","from","scrollToTop","oNewProps","oNewState","setState","concat","prevProps","refs","scrollTop","react_default","a","index_es","onClick","aListNodesDom","map","oCom","iIndex","components_ListNode","key","myKey","oLoaderDOM","bHasMore","size","ref","react_infinite_scroller_default","pageStart","loadMore","hasMore","loader","useWindow","Math","random","initialLoad","sColName","sCurrentSortColumn","sNameSortOrder","sCasesSortOrder","handleSortOrderChanged","bind","getAllListNodesDOM","oHeaderDOM","getPanelHeaderDOM","oListContainer","getListContainerDOM","sCollapseExpand","ConnectedPanel","actions","App","handleExpandIconClicked","error","info","console","_this$props","sPanelExpanderVisibility","components_Panel","App_Tooltip","ConnectedApp","Boolean","window","location","hostname","match","compareFunction","x","y","sSortOrder","OriginalData","aComm","aPaginatedData","length","slice","originalData","isDataChanged","getInitialState","store","createStore","arguments","undefined","action","objectSpread","bColChanged","newSortColumn","sNewSortOrder","oCurrentSortedData","aCurrentData","newSortedData","sort","b","toLowerCase","iSize","iNewFrom","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d074c7d.chunk.js","sourcesContent":["export const TOGGLE_SORT_ORDER = 'TOGGLE_SORT_ORDER';\nexport const TOGGLE_PANEL_COLLAPSE = 'TOGGLE_PANEL_COLLAPSE';\nexport const LOAD_MORE = 'LOAD_MORE';\n\nexport const toggleSortOrder = (sortColumn, sCurrentSortOrder) => ({\n  type: TOGGLE_SORT_ORDER,\n  sortOrder: sCurrentSortOrder,\n  sortColumn\n});\n\nexport const togglePanelCollapse = (bVal) => ({\n  type: TOGGLE_PANEL_COLLAPSE,\n  isPanelCollapsed: bVal\n});\n\nexport const handleLoadMore = () => ({\n  type: LOAD_MORE\n});\n","import connect from \"react-redux/es/connect/connect\";\n\nconst React = require('react');\nconst PropTypes = require('prop-types');\nconst Tooltip = require('@material-ui/core').Tooltip;\n\nclass ListNode extends React.Component {\n\n  render() {\n    return (\n      <div className={\"listNodeContainer\"}>\n        <div className={\"listName listCell\"}>\n          <Tooltip title={this.props.name} enterDelay={500}>\n            <div className={\"actualCell\"}>{this.props.name}</div>\n          </Tooltip>\n        </div>\n        <div className={\"listCases listCell\"}>{this.props.cases}</div>\n      </div>\n    );\n  }\n\n}\n\nListNode.propTypes = {\n  name: PropTypes.string,\n  cases: PropTypes.number\n};\n\nfunction mapStateToProps(state) {\n  return state;\n}\nconst ConnectedListNode = connect(mapStateToProps)(ListNode);\nexport default ConnectedListNode;","import * as actions from \"../actions\";\nimport connect from \"react-redux/es/connect/connect\";\n\nimport ListNode from \"./ListNode\";\n\nimport React from 'react'\nimport PropTypes from 'prop-types';\nimport {Tooltip} from '@material-ui/core';\nimport InfiniteScroll from 'react-infinite-scroller';\n\n\nclass Panel extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let oProps = this.props;\n    this.state = {\n      communities: oProps.paginatedData,\n      city: oProps.city,\n      totalCount: oProps.totalCount,\n      from: oProps.from,\n      scrollToTop: false\n    }\n  }\n\n  componentWillReceiveProps(oNewProps, oNewState) {\n    if (oNewProps.from === 0) {\n      this.setState({\n        communities: oNewProps.paginatedData,\n        from: oNewProps.from,\n        scrollToTop: true\n      })\n    } else if (oNewProps.from !== this.state.from) {\n      this.setState({\n        communities: this.state.communities.concat(oNewProps.paginatedData),\n        from: oNewProps.from\n      })\n    }\n  }\n\n  componentDidUpdate(prevProps){\n    if(this.state.scrollToTop){\n      let oDOM = this.refs[\"listNodesWrapper\"];\n      oDOM.scrollTop = 0;\n      this.setState({\n        scrollToTop: false\n      })\n    }\n  }\n\n  handleLoadMoreItems = () => {\n    this.props.handleLoadMore();\n  };\n\n  handleCollapseIconClicked = (oEvent) => {\n    oEvent.stopPropagation();\n    this.props.togglePanelCollapse(true);\n  };\n\n  getPanelHeaderDOM() {\n    return (\n      <div className={\"panelHeaderWrapper\"}>\n        <div className={\"panelHeader\"}>List of Communities</div>\n        <div className={\"communityCount\"}>{this.state.totalCount || 0}</div>\n        <div className={\"orgNameWrapper\"}>\n          <span className={\"orgName\"}>Communities</span> in <span className={\"orgName\"}>{this.state.city}</span>\n        </div>\n        <Tooltip title={\"Collapse\"}>\n          <div className={\"expandCollapseIcon doCollapse\"} onClick={this.handleCollapseIconClicked}/>\n        </Tooltip>\n      </div>\n    );\n  }\n\n  getAllListNodesDOM() {\n    let aCommunities = this.state.communities || [];\n    let aListNodesDom = aCommunities.map((oCom, iIndex) => {\n      return (<ListNode name={oCom.name} cases={oCom.cases} key={iIndex} myKey={iIndex}/>);\n    });\n\n    let oLoaderDOM = <div className=\"loader\" key={0}>Loading ...</div>;\n\n    let bHasMore = this.state.from + this.props.size < this.state.totalCount;\n\n    return (\n      <div className={\"listNodesWrapper\"} ref={\"listNodesWrapper\"}>\n        <InfiniteScroll\n          pageStart={0}\n          loadMore={this.handleLoadMoreItems}\n          hasMore={bHasMore}\n          loader={oLoaderDOM}\n          useWindow={false}\n          key={Math.random()}\n          initialLoad={true}\n        >\n          {aListNodesDom}\n        </InfiniteScroll>\n      </div>\n    );\n  }\n\n  handleSortOrderChanged(sColName, oEvent) {\n    oEvent.stopPropagation();\n    let sCurrentSortOrder = this.props.sortOrder;\n    this.props.toggleSortOrder(sColName, sCurrentSortOrder);\n  }\n\n  getListContainerDOM() {\n    let sCurrentSortColumn = this.props.sortColumn;\n    let sCurrentSortOrder = this.props.sortOrder;\n\n    let sNameSortOrder = sCurrentSortColumn === \"name\" ? sCurrentSortOrder + \" active\" : \"desc\";\n    let sCasesSortOrder = sCurrentSortColumn === \"cases\" ? sCurrentSortOrder + \" active\" : \"desc\";\n\n    return (\n      <div className={\"listNodesContainer\"}>\n        <div className={\"listTableHeaderRow\"}>\n          <div className={\"lhName listCell\"}>\n            <span className={\"lhCol\"}>Name</span>\n            <Tooltip title={\"Toggle Sort Order\"}>\n              <div className={\"sortIcon nameSort \" + sNameSortOrder}\n                   onClick={this.handleSortOrderChanged.bind(this, \"name\")}/>\n            </Tooltip>\n          </div>\n          <div className={\"lhCases listCell\"}>\n            <span className={\"lhCol\"}>Number Of Cases</span>\n            <Tooltip title={\"Toggle Sort Order\"}>\n              <div className={\"sortIcon casesSort \" + sCasesSortOrder}\n                   onClick={this.handleSortOrderChanged.bind(this, \"cases\")}/>\n            </Tooltip>\n          </div>\n        </div>\n        {this.getAllListNodesDOM()}\n      </div>\n    );\n\n  }\n\n  render() {\n    let oHeaderDOM = this.getPanelHeaderDOM();\n    let oListContainer = this.getListContainerDOM();\n\n    let sCollapseExpand = this.props.isPanelCollapsed ? \"collapsed\" : \"expanded\";\n    return (\n      <div className={\"panelContainer \" + sCollapseExpand}>\n        {oHeaderDOM}\n        {oListContainer}\n      </div>\n    );\n  }\n\n}\n\nPanel.propTypes = {\n  data: PropTypes.object,\n  isPanelCollapsed: PropTypes.bool,\n  sortColumn: PropTypes.string,\n  sortOrder: PropTypes.string,\n};\n\nfunction mapStateToProps(state) {\n  return state;\n}\n\nconst ConnectedPanel = connect(mapStateToProps, actions)(Panel);\nexport default ConnectedPanel;","import React from 'react';\nimport Panel from './Panel';\nimport {connect} from 'react-redux'\nimport * as actions from '../actions/index';\n\nconst Tooltip = require('@material-ui/core').Tooltip;\n\n\nclass App extends React.Component {\n\n  componentDidCatch(error, info) {\n    console.error(error, info);\n  }\n\n  handleExpandIconClicked = (oEvent) => {\n    oEvent.stopPropagation();\n    this.props.togglePanelCollapse(false);\n  };\n\n  render() {\n    let {\n      paginatedData,\n      name,\n      totalCount,\n      size,\n      isPanelCollapsed,\n      sortColumn,\n      sortOrder\n    } = this.props;\n\n    let sPanelExpanderVisibility = isPanelCollapsed ? \"show\" : \"hide\";\n    return (\n      <div className={\"appContainer\"}>\n        <div className={\"topDummyHeaderBar\"}/>\n        <div className={\"bottomScreenContainer\"}>\n          <Panel paginatedData={paginatedData}\n                 isPanelCollapsed={isPanelCollapsed}\n                 name={name}\n                 totalCount={totalCount}\n                 size={size}\n                 sortColumn={sortColumn}\n                 sortOrder={sortOrder}/>\n          <div className={\"panelExpander \" + sPanelExpanderVisibility}>\n            <Tooltip title={\"Expand\"}>\n              <div className={\"expandCollapseIcon doExpand\"} onClick={this.handleExpandIconClicked}/>\n            </Tooltip>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return state;\n}\n\nconst ConnectedApp = connect(mapStateToProps, actions)(App);\nexport default ConnectedApp\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {TOGGLE_SORT_ORDER, TOGGLE_PANEL_COLLAPSE, LOAD_MORE} from '../actions'\n\n\nfunction compareFunction(x, y, sSortOrder) {\n  if (sSortOrder === \"asc\") {\n    return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n  } else {\n    return ((x > y) ? -1 : ((x < y) ? 1 : 0));\n  }\n}\n\nfunction handleSortOrderChanged(state, sColName, sCurrentSortOrder) {\n  let bColChanged = sColName !== state.sortColumn;\n  let newSortColumn = sColName;\n\n  sCurrentSortOrder = bColChanged ? \"\" : sCurrentSortOrder;\n  let sNewSortOrder = (sCurrentSortOrder === \"desc\") ? \"asc\" : \"desc\";\n\n  let oCurrentSortedData = state.originalData;\n  let aCurrentData = oCurrentSortedData.communities;\n\n  let newSortedData = {\n    name: oCurrentSortedData.name\n  };\n  if (sColName === \"name\") {\n    newSortedData.communities = aCurrentData.sort(function (a, b) {\n      let x = a[sColName].toLowerCase();\n      let y = b[sColName].toLowerCase();\n      return compareFunction(x, y, sNewSortOrder);\n    });\n  } else {\n    newSortedData.communities = aCurrentData.sort(function (a, b) {\n      return compareFunction(a[sColName], b[sColName], sNewSortOrder);\n    });\n  }\n\n\n  let iFrom = 0;\n  let iSize = state.size;\n  let aComm = newSortedData.communities;\n  let aPaginatedData = aComm.length < iFrom + iSize ?\n    aComm.slice(iFrom, iFrom + iSize - aComm.length) : aComm.slice(iFrom, iFrom + iSize);\n\n\n  return {\n    ...state,\n    originalData: newSortedData,\n    sortOrder: sNewSortOrder,\n    sortColumn: newSortColumn,\n    from: iFrom,\n    paginatedData: aPaginatedData\n  }\n}\n\nfunction handleLoadMore(state) {\n  let iSize = state.size;\n  let iNewFrom = state.from + iSize;\n\n  let aComm = state.originalData.communities;\n  let aPaginatedData = aComm.length < iNewFrom + iSize ?\n    aComm.slice(iNewFrom, iNewFrom + iSize - aComm.length) : aComm.slice(iNewFrom, iNewFrom + iSize);\n\n  return{\n    ...state,\n    paginatedData: aPaginatedData,\n    from: iNewFrom\n  }\n\n}\n\nexport default (state = {}, action) => {\n  switch (action.type) {\n    case TOGGLE_PANEL_COLLAPSE:\n      return {\n        ...state,\n        isPanelCollapsed: action.isPanelCollapsed\n      };\n\n\n    case TOGGLE_SORT_ORDER:\n      return handleSortOrderChanged(state, action.sortColumn, action.sortOrder);\n\n    case LOAD_MORE:\n      return handleLoadMore(state);\n\n\n    default:\n      return state\n  }\n}\n","let OriginalData = require(\"../constants/data\");\n\nexport default function getInitialState() {\n  let iFrom = 0;\n  let iSize = 100;\n\n  let aComm = OriginalData.communities;\n  let aPaginatedData = aComm.length < iSize ? aComm : aComm.slice(iFrom, iSize);\n\n  return {\n    originalData: OriginalData,\n    paginatedData: aPaginatedData,\n    city: OriginalData.name,\n    totalCount: aComm.length,\n    isPanelCollapsed: false,\n    isDataChanged: false,\n    sortColumn: \"\", // or name or cases\n    sortOrder: \"\", // or asc or desc\n    from: 0,\n    size: iSize,\n    hasMore: iSize < aComm.length\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './style/index.css';\nimport App from './components/App';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport reducer from './reducers'\n\n\nimport getInitialState from './reducers/initial-state';\nconst state = getInitialState();\nconst store = createStore(reducer, state, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('app')\n)\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}